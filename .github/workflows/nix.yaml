name: Nix

on:
  push:
    branches: ["master"]
    tags: ['v*.*.*']
  pull_request:
    branches: ["master"]

jobs:
  flake:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
      - uses: cachix/cachix-action@v12
        with:
          name: expidus
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: nix-community
          skipPush: "${{ github.event_name == 'pull_request' }}"
      - name: Build Flake
        run: nix build -L
      - name: Check Flake
        run: nix flake check
      - name: Bundle Flake
        if: github.event_name != 'pull_request'
        run: nix bundle
  legacy:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
      - uses: cachix/cachix-action@v12
        with:
          name: expidus
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: nix-community
          skipPush: true
      - name: Build
        run: nix-build ./default.nix -A expidus-sdk
  package:
    strategy:
      matrix:
        package: [gtk-layer-shell, vte, libical, libadwaita, cssparser, gxml, vadi, ntk, libdevident, libtokyo, genesis-shell, expidus-terminal]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [flake]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
      - uses: cachix/cachix-action@v12
        with:
          name: expidus
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: nix-community
          skipPush: "${{ github.event_name == 'pull_request' }}"
      - name: Build
        run: nix-build ./default.nix -A ${{ matrix.package }}
  nix-release:
    continue-on-error: true
    strategy:
      matrix:
        attr: [channel, manual, iso_gnome, iso_genesis]
        arch: [x86_64-linux]
        include:
          - attr: channel
            arch: aarch64-linux
          - attr: manual
            arch: aarch64-linux
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
      - uses: cachix/cachix-action@v12
        with:
          name: expidus
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: nix-community
          skipPush: "${{ github.event_name == 'pull_request' }}"
      - name: Build
        run: nix-build ./nixos/release.nix -A ${{ matrix.attr }}.${{ matrix.arch }} --show-trace
      - name: Compress Artifact
        run: find . -maxdepth 1 -mindepth 1 -name 'result*' -exec tar -cf {}.tar.gz -C {} --dereference . \;
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.attr }}-result
          path: |
            result-*.tar.gz
            result.tar.gz
